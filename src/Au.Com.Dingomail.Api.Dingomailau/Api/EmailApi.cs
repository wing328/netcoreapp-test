/*
 * Dingo Mail AU API
 *
 * <p>API for api.dingomail.com.au</p> 
 *
 * The version of the OpenAPI document: 0.2.4
 * Contact: info@dingomail.com.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Au.Com.Dingomail.Api.Dingomailau.Client;
using Au.Com.Dingomail.Api.Dingomailau.Model;

namespace Au.Com.Dingomail.Api.Dingomailau.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check the status of an email previously sent
        /// </remarks>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Email</param>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <returns>CheckStatus</returns>
        CheckStatus CheckStatus(string id, string keyid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check the status of an email previously sent
        /// </remarks>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Email</param>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <returns>ApiResponse of CheckStatus</returns>
        ApiResponse<CheckStatus> CheckStatusWithHttpInfo(string id, string keyid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new email message
        /// </remarks>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <param name="newEmail">Email Data</param>
        /// <returns>EmailResponse</returns>
        EmailResponse Create(string keyid, NewEmail newEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new email message
        /// </remarks>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <param name="newEmail">Email Data</param>
        /// <returns>ApiResponse of EmailResponse</returns>
        ApiResponse<EmailResponse> CreateWithHttpInfo(string keyid, NewEmail newEmail);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check the status of an email previously sent
        /// </remarks>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Email</param>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckStatus</returns>
        System.Threading.Tasks.Task<CheckStatus> CheckStatusAsync(string id, string keyid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check the status of an email previously sent
        /// </remarks>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Email</param>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckStatus>> CheckStatusWithHttpInfoAsync(string id, string keyid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new email message
        /// </remarks>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <param name="newEmail">Email Data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailResponse</returns>
        System.Threading.Tasks.Task<EmailResponse> CreateAsync(string keyid, NewEmail newEmail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new email message
        /// </remarks>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <param name="newEmail">Email Data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailResponse>> CreateWithHttpInfoAsync(string keyid, NewEmail newEmail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailApi : IEmailApiSync, IEmailApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailApi : IEmailApi
    {
        private Au.Com.Dingomail.Api.Dingomailau.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailApi(string basePath)
        {
            this.Configuration = Au.Com.Dingomail.Api.Dingomailau.Client.Configuration.MergeConfigurations(
                Au.Com.Dingomail.Api.Dingomailau.Client.GlobalConfiguration.Instance,
                new Au.Com.Dingomail.Api.Dingomailau.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Au.Com.Dingomail.Api.Dingomailau.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Au.Com.Dingomail.Api.Dingomailau.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Au.Com.Dingomail.Api.Dingomailau.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailApi(Au.Com.Dingomail.Api.Dingomailau.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Au.Com.Dingomail.Api.Dingomailau.Client.Configuration.MergeConfigurations(
                Au.Com.Dingomail.Api.Dingomailau.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Au.Com.Dingomail.Api.Dingomailau.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Au.Com.Dingomail.Api.Dingomailau.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Au.Com.Dingomail.Api.Dingomailau.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmailApi(Au.Com.Dingomail.Api.Dingomailau.Client.ISynchronousClient client, Au.Com.Dingomail.Api.Dingomailau.Client.IAsynchronousClient asyncClient, Au.Com.Dingomail.Api.Dingomailau.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Au.Com.Dingomail.Api.Dingomailau.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Au.Com.Dingomail.Api.Dingomailau.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Au.Com.Dingomail.Api.Dingomailau.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Au.Com.Dingomail.Api.Dingomailau.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Au.Com.Dingomail.Api.Dingomailau.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Check the status of an email previously sent
        /// </summary>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Email</param>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <returns>CheckStatus</returns>
        public CheckStatus CheckStatus(string id, string keyid)
        {
            Au.Com.Dingomail.Api.Dingomailau.Client.ApiResponse<CheckStatus> localVarResponse = CheckStatusWithHttpInfo(id, keyid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Check the status of an email previously sent
        /// </summary>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Email</param>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <returns>ApiResponse of CheckStatus</returns>
        public Au.Com.Dingomail.Api.Dingomailau.Client.ApiResponse<CheckStatus> CheckStatusWithHttpInfo(string id, string keyid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Au.Com.Dingomail.Api.Dingomailau.Client.ApiException(400, "Missing required parameter 'id' when calling EmailApi->CheckStatus");
            }

            // verify the required parameter 'keyid' is set
            if (keyid == null)
            {
                throw new Au.Com.Dingomail.Api.Dingomailau.Client.ApiException(400, "Missing required parameter 'keyid' when calling EmailApi->CheckStatus");
            }

            Au.Com.Dingomail.Api.Dingomailau.Client.RequestOptions localVarRequestOptions = new Au.Com.Dingomail.Api.Dingomailau.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("keyid", Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.ParameterToString(keyid)); // header parameter

            // authentication (Key Secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("keysecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("keysecret", this.Configuration.GetApiKeyWithPrefix("keysecret"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CheckStatus>("/email/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Check the status of an email previously sent
        /// </summary>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Email</param>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckStatus</returns>
        public async System.Threading.Tasks.Task<CheckStatus> CheckStatusAsync(string id, string keyid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Au.Com.Dingomail.Api.Dingomailau.Client.ApiResponse<CheckStatus> localVarResponse = await CheckStatusWithHttpInfoAsync(id, keyid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Check the status of an email previously sent
        /// </summary>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Email</param>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckStatus)</returns>
        public async System.Threading.Tasks.Task<Au.Com.Dingomail.Api.Dingomailau.Client.ApiResponse<CheckStatus>> CheckStatusWithHttpInfoAsync(string id, string keyid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Au.Com.Dingomail.Api.Dingomailau.Client.ApiException(400, "Missing required parameter 'id' when calling EmailApi->CheckStatus");
            }

            // verify the required parameter 'keyid' is set
            if (keyid == null)
            {
                throw new Au.Com.Dingomail.Api.Dingomailau.Client.ApiException(400, "Missing required parameter 'keyid' when calling EmailApi->CheckStatus");
            }


            Au.Com.Dingomail.Api.Dingomailau.Client.RequestOptions localVarRequestOptions = new Au.Com.Dingomail.Api.Dingomailau.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("keyid", Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.ParameterToString(keyid)); // header parameter

            // authentication (Key Secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("keysecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("keysecret", this.Configuration.GetApiKeyWithPrefix("keysecret"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CheckStatus>("/email/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new email message
        /// </summary>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <param name="newEmail">Email Data</param>
        /// <returns>EmailResponse</returns>
        public EmailResponse Create(string keyid, NewEmail newEmail)
        {
            Au.Com.Dingomail.Api.Dingomailau.Client.ApiResponse<EmailResponse> localVarResponse = CreateWithHttpInfo(keyid, newEmail);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new email message
        /// </summary>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <param name="newEmail">Email Data</param>
        /// <returns>ApiResponse of EmailResponse</returns>
        public Au.Com.Dingomail.Api.Dingomailau.Client.ApiResponse<EmailResponse> CreateWithHttpInfo(string keyid, NewEmail newEmail)
        {
            // verify the required parameter 'keyid' is set
            if (keyid == null)
            {
                throw new Au.Com.Dingomail.Api.Dingomailau.Client.ApiException(400, "Missing required parameter 'keyid' when calling EmailApi->Create");
            }

            // verify the required parameter 'newEmail' is set
            if (newEmail == null)
            {
                throw new Au.Com.Dingomail.Api.Dingomailau.Client.ApiException(400, "Missing required parameter 'newEmail' when calling EmailApi->Create");
            }

            Au.Com.Dingomail.Api.Dingomailau.Client.RequestOptions localVarRequestOptions = new Au.Com.Dingomail.Api.Dingomailau.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("keyid", Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.ParameterToString(keyid)); // header parameter
            localVarRequestOptions.Data = newEmail;

            // authentication (Key Secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("keysecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("keysecret", this.Configuration.GetApiKeyWithPrefix("keysecret"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailResponse>("/email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new email message
        /// </summary>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <param name="newEmail">Email Data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailResponse</returns>
        public async System.Threading.Tasks.Task<EmailResponse> CreateAsync(string keyid, NewEmail newEmail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Au.Com.Dingomail.Api.Dingomailau.Client.ApiResponse<EmailResponse> localVarResponse = await CreateWithHttpInfoAsync(keyid, newEmail, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new email message
        /// </summary>
        /// <exception cref="Au.Com.Dingomail.Api.Dingomailau.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyid">The ID of the API Key being used</param>
        /// <param name="newEmail">Email Data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailResponse)</returns>
        public async System.Threading.Tasks.Task<Au.Com.Dingomail.Api.Dingomailau.Client.ApiResponse<EmailResponse>> CreateWithHttpInfoAsync(string keyid, NewEmail newEmail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'keyid' is set
            if (keyid == null)
            {
                throw new Au.Com.Dingomail.Api.Dingomailau.Client.ApiException(400, "Missing required parameter 'keyid' when calling EmailApi->Create");
            }

            // verify the required parameter 'newEmail' is set
            if (newEmail == null)
            {
                throw new Au.Com.Dingomail.Api.Dingomailau.Client.ApiException(400, "Missing required parameter 'newEmail' when calling EmailApi->Create");
            }


            Au.Com.Dingomail.Api.Dingomailau.Client.RequestOptions localVarRequestOptions = new Au.Com.Dingomail.Api.Dingomailau.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("keyid", Au.Com.Dingomail.Api.Dingomailau.Client.ClientUtils.ParameterToString(keyid)); // header parameter
            localVarRequestOptions.Data = newEmail;

            // authentication (Key Secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("keysecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("keysecret", this.Configuration.GetApiKeyWithPrefix("keysecret"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailResponse>("/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
